name: Sync Fork with Upstream

on:
  # 每小时检查一次上游更新（GitHub Actions 最小间隔是 5 分钟，但建议不要太频繁）
  schedule:
    - cron: '*/30 * * * *'  # 每 30 分钟运行一次
  
  # 当你的仓库有 push 时也触发（确保本地更改不被覆盖）
  push:
    branches:
      - main
      - master
      - dev
  
  # 允许手动触发
  workflow_dispatch:
    inputs:
      sync_branch:
        description: 'Branch to sync (leave empty for all branches)'
        required: false
        type: string
      force_sync:
        description: 'Force sync even if there are conflicts'
        required: false
        type: boolean
        default: false

jobs:
  sync:
    runs-on: ubuntu-latest
    # 防止并发运行导致冲突
    concurrency:
      group: sync-upstream
      cancel-in-progress: false
    
    steps:
      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          # 上游仓库地址
          UPSTREAM_REPO="https://github.com/Wei-Shaw/claude-relay-service.git"
          
          echo "Adding upstream remote: $UPSTREAM_REPO"
          git remote add upstream $UPSTREAM_REPO || git remote set-url upstream $UPSTREAM_REPO
          git fetch upstream

      - name: Check for updates
        id: check
        run: |
          # 获取默认分支
          DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          
          # 检查是否有新的提交
          LOCAL_COMMIT=$(git rev-parse HEAD)
          UPSTREAM_COMMIT=$(git rev-parse upstream/$DEFAULT_BRANCH)
          
          if [ "$LOCAL_COMMIT" != "$UPSTREAM_COMMIT" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "📦 Found new commits in upstream repository"
            git log --oneline HEAD..upstream/$DEFAULT_BRANCH | head -20
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "✅ Already up to date with upstream"
          fi

      - name: Sync default branch
        if: steps.check.outputs.has_updates == 'true'
        run: |
          DEFAULT_BRANCH="${{ steps.check.outputs.default_branch }}"
          echo "🔄 Syncing $DEFAULT_BRANCH branch..."
          
          git checkout $DEFAULT_BRANCH
          
          # 尝试自动合并
          if git merge upstream/$DEFAULT_BRANCH --no-edit; then
            echo "✅ Successfully merged upstream changes"
            git push origin $DEFAULT_BRANCH
          elif [ "${{ github.event.inputs.force_sync }}" == "true" ]; then
            echo "⚠️ Conflicts detected, using force sync..."
            git reset --hard upstream/$DEFAULT_BRANCH
            git push --force-with-lease origin $DEFAULT_BRANCH
          else
            echo "❌ Merge conflicts detected. Please resolve manually or run with force_sync=true"
            exit 1
          fi

      - name: Sync all other branches
        if: steps.check.outputs.has_updates == 'true' && github.event.inputs.sync_branch == ''
        continue-on-error: true
        run: |
          echo "🔄 Syncing other branches..."
          
          # 同步其他重要分支
          for branch in dev staging production; do
            if git ls-remote --heads upstream | grep -q "refs/heads/$branch"; then
              echo "Syncing branch: $branch"
              
              # 获取本地和上游的 commit
              LOCAL=$(git rev-parse --verify origin/$branch 2>/dev/null || echo "none")
              UPSTREAM=$(git rev-parse upstream/$branch)
              
              if [ "$LOCAL" != "$UPSTREAM" ]; then
                git checkout -B $branch upstream/$branch
                git push --force-with-lease origin $branch || echo "Failed to push $branch"
              fi
            fi
          done

      - name: Sync specific branch
        if: github.event.inputs.sync_branch != ''
        run: |
          BRANCH="${{ github.event.inputs.sync_branch }}"
          echo "🔄 Syncing specific branch: $BRANCH"
          
          if git ls-remote --heads upstream | grep -q "refs/heads/$BRANCH"; then
            git checkout -B $BRANCH upstream/$BRANCH
            git push --force-with-lease origin $BRANCH
            echo "✅ Successfully synced $BRANCH"
          else
            echo "❌ Branch $BRANCH not found in upstream"
            exit 1
          fi

      - name: Create sync report
        if: always()
        run: |
          echo "## 📊 Sync Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Updates Found**: ${{ steps.check.outputs.has_updates }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Default Branch**: ${{ steps.check.outputs.default_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check.outputs.has_updates }}" == "true" ]; then
            echo "### Recent commits from upstream:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            git log --oneline HEAD..upstream/${{ steps.check.outputs.default_branch }} | head -10 >> $GITHUB_STEP_SUMMARY || echo "No new commits" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi